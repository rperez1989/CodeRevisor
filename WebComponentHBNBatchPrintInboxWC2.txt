======OBJECT = WebComponentHBNBatchPrintInboxWC2 === HBNBatch Print Inbox WC2=====
=== RULES ===

=== EVENTS SOURCE ===

Event Start

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	&STRNUMBER.Visible = False
	InboxGrid.Rows = 10

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

    PLoadContext.Call(&AuxContext)
    &StrNumber = &AuxContext.FilterStore
    &UsrId     = &AuxContext.UserID
	
    // Get Batch Size Parameter
	PGetParmBatchSize(&BatchSize)
	
    &FilterTask     = Tasks.ALL
    &SortBy         = SortInbox.Created
    &ReceivingStr.SetEmpty()
    &ShippingStr.SetEmpty()
    &TnfIdFilter.SetEmpty()
    &FromDate 	= nullvalue(&FromDate)
    &ToDate 	= nullvalue(&ToDate)
    &totalTasks = 0
    &new 		= 0

	do 'doSearch'

EndEvent

Event InboxGrid.Load

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */

	//this code should be inside the For Each used to load the grid

	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

    &GridSelected.Enabled = true
	&new = 0
	
    For &InboxSDTItem in &InboxSDT 
		&GridSelected	= &InboxSDTItem.GrdSelected
        &TnfFStrNum     = &InboxSDTItem.TnffstrNum
        &TnfToStrNum    = &InboxSDTItem.TnfToStrNum
        &TnfFStrDsc     = &InboxSDTItem.FromStoreName.Trim()
        &TnfToStrDsc    = &InboxSDTItem.ToStoreName.Trim()
        //&TnfTask        = Tasks.EnumerationDescription(&InboxSDTItem.TnfTask)
		&TnfTask		= &InboxSDTItem.TnfTask
        &TnfId2         = &InboxSDTItem.TnfID
        &TnfWLstId      = &InboxSDTItem.TnfWLstId
        &TnfInsOnDT     = &InboxSDTItem.TnfDate
        &TnfWFId        = &InboxSDTItem.TnfWFId
		&TnfTknBy		= &InboxSDTItem.TakenByUID
		
        &image2.FromImage(ActionDisabled)
		&image2.Tooltiptext= ''
		
		if &InboxSDTItem.PrintedFlag = Boolean.TRUE
            &image2.FromImage(PrinterOk)
			&image2.Tooltiptext = 'Printed'
		else
			&image2.FromImage(NotDone)
			&image2.Tooltiptext = 'Not Printed'
        endif
		
        do 'GetSelectedListFromSession'
        do 'CheckSelected'
		
		if &InboxSDTItem.TakenByUID.IsEmpty()
			&Taken.FromImage(MailClosed)
			&Taken.Tooltiptext = "New"
			&new += 1
		else
			if &InboxSDTItem.TakenByUID = &AuxContext.UserId
				&Taken.FromImage(MailOpen)
				&Taken.Tooltiptext = "In Process"
			else
				&Taken.FromImage(MailAssigned)
			endif
		endif
		
		load
		
    endfor
	
    &totalTasks = &InboxSDT.Count
    &Selcount 	= &TnfList.Count
    &count 		= &totalTasks
	
	//Summary
	txtsummary.Caption = 'Summary: Inbox ' + &totalTasks.ToString().Trim() + ' - New ' + &new.ToString().Trim() + ' - Selected: ' + &Selcount.ToString().Trim()
	
    &Session.Set("TN2InboxCount",trim(str(&count)))
	
    &TnfIdFilter.Setfocus()

EndEvent

Event 'DoPrintSelectedBtn'

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */



	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

	&TnfList.Clear()
	
	&message.Description = '&FilterTask = ' + &FilterTask.ToString()
	PTraceLog.Call(&Pgmname, &message)
	
	Do case
		Case &FilterTask = Tasks.ALL
			
			msg('You should select a task type')
			
		Case &FilterTask = Tasks.SHIP or &FilterTask = Tasks.RECEIVE
			
			for each line in InboxGrid
				if (&GridSelected = true)
					PTRSetPrintFlag(&TnfID2,TransferCategory.Internal)
					//add to tnflist
					&tnflistitem.TnfID = &TnfID2
					&TnfList.Add(&tnflistitem)
					&tnflistitem = new()
				endif
			endfor
			commit
			
			//call report in popup
			&workitemsxml2 = &TnfList.ToXml()
			
			&Session.Set("TnfListPrint",&workitemsxml2)
			RBNREP_ShipReceiveTicket.Popup(0, '')
			
			&TnfList.Clear()
			
			//Refresh
			InboxGrid.Refresh()
			
			
		Case &FilterTask = Tasks.LQD
			
			for each line in InboxGrid
				if (&GridSelected = true)
					PTRSetPrintFlag(&TnfID2,TransferCategory.Liquidation)
					//add to tnflist
					&tnflistitem.TnfID = &TnfID2
					&TnfList.Add(&tnflistitem)
					&tnflistitem = new()
				endif
			endfor
			commit
			
			//call report in popup
			&workitemsxml2 = &TnfList.ToXml()
			
			&Session.Set("TnfListPrint",&workitemsxml2)
			NLQREP_ShipTicket.Popup(0)
			
			&TnfList.Clear()
			
			//Refresh
			InboxGrid.Refresh()
	endcase

EndEvent

Event Enter

	do 'ApplyFilters'
	do 'doSearch'
	
	InboxGrid.Refresh()

	/* Generated by DVelop Work With Plus Pattern [Start] - Do not change */



	/* Generated by DVelop Work With Plus Pattern [End] - Do not change */

EndEvent

Event &TnfID2.Click

	ploadContext.Call(&AuxContext)
	if (&TnfTknBy.IsEmpty()) or (&TnfTknBy = &AuxContext.UserId)
		if &TnfTask = Tasks.SHIP
			HPOShip.Popup(&TnfID2)
		else
			if &TnfTask = Tasks.LQD
				&TransferCategory = TransferCategory.Liquidation
				NLQShip.Popup(&TnfID2,&TransferCategory)
			else
				HPOReceive.Popup(&TnfID2)	
			endif	
		
		endif
	endif
	
	//Refresh
	InboxGrid.Refresh()

EndEvent

Event &SortBy.Click

	do 'doSearch'
	InboxGrid.Refresh()

EndEvent

Event &SelFirst50.Click

	&qtySelected = 0
	if (&SelFirst50=true)
		&selectedState = true
	else
		&selectedState = false
	endif
	
	//Refresh
	InboxGrid.Refresh()

EndEvent

Event &LQRId.Click

	if not &LQRId.IsEmpty() and &LQRId <> 0
		
		&FilterTask = Tasks.LQD
		
	else
		if &LQRId = 0
			&FilterTask = Tasks.ALL
		endif
		
	endif

EndEvent

Sub 'doSearch'

	PInboxSDTLoad(&StrNumber, &ReceivingStr, &LQRId, &ShippingStr, &TnfIdFilter, &FromDate, &ToDate, &FilterTask, &SortBy, &InboxSDT)
	
	For &InboxSDTItem in &InboxSDT 
		&InboxSDTItem.GrdSelected = &selectedState
		&qtySelected +=1
		if (&qtySelected=50)
			exit
		endif
	EndFor

EndSub

Sub 'CheckSelected'

    &Selected = Boolean.FALSE
    for &IndexTnfID in &TnfList
        if &IndexTnfID.TnfID = &TnfId2
            &Selected = Boolean.TRUE
            exit
        endif
    endfor

EndSub

Sub 'GetSelectedListFromSession'

    &TnfList.FromXml(&Session.Get('TnfList'))

EndSub

Sub 'ApplyFilters'

	&Message.Description ='Sub ApplyFilters &TnfIdFilter=' + &TnfIdFilter.ToString().Trim()
	PTraceLog.Call(&Pgmname, &Message)
	
    if(not &TnfIdFilter.IsEmpty())
		&ExisteTnfId = Boolean.FALSE
        for each
            where TnfID = &TnfIdFilter
            where TnfRdyFlg = 1
			
            if &StrNumber = 0 or 
               ( TnfSts = TnfStatus.Request and  TnfFStrNum = &StrNumber ) or 
               ( TnfSts = TnfStatus.Shipped and  TnfToStrNum = &StrNumber )
				
                &ExisteTnfId = Boolean.TRUE
                if TnfSts = TnfStatus.Request
                    &AuxTnfTask = Tasks.SHIP
					
					&AuxTnfTknBy = iif(TnfShpTknBy.IsEmpty(), 0, TnfShpTknBy)
                else
                    &AuxTnfTask = Tasks.RECEIVE
					&AuxTnfTknBy = iif(TnfRcvTknBy.IsEmpty(), 0, TnfRcvTknBy)
                endif	
			endif
		when none
			for each
				where LqTskId = &TnfIdFilter
				where LqTskRFlg = true
				where LqTskSts = TnfStatus.Request
				
				&ExisteTnfId = Boolean.TRUE
				&AuxTnfTask = Tasks.LQD
				&AuxTnfTknBy = iif(LqTskTknBy.IsEmpty(), 0, LqTskTknBy)
			endfor
		endfor
		
		if(&ExisteTnfId = Boolean.TRUE)
        	do 'ExecuteSelectedTransfer'
         endif
	 
     endif

EndSub

Sub 'ExecuteSelectedTransfer'

	ploadContext.Call(&AuxContext)
	if (&AuxTnfTknBy.IsEmpty()) or (&AuxTnfTknBy = &AuxContext.UserId)
		if &AuxTnfTask = Tasks.SHIP
			HPOShip.Popup(&TnfIdFilter)
			&TnfIdFilter.SetEmpty()
		else
			if &AuxTnfTask = Tasks.RECEIVE
				HPOReceive.Popup(&TnfIdFilter)
				&TnfIdFilter.SetEmpty()
			else
				&AuxTnfTask = Tasks.LQD
				NLQShip.Popup(&TnfIdFilter, TransferCategory.Liquidation)
				&TnfIdFilter.SetEmpty()
			endif
		endif
	endif
	refresh

EndSub



